
import React, { useEffect, useRef } from "react";
import { CountUp } from 'countup.js';

const reasonsData = [
  {
    emoji: "ü§ù",
    title: "–ó–∞–±–æ—Ç–∞",
    description: "–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –¥–æ–≤–µ—Ä–∏—è"
  },
  {
    emoji: "üôã‚Äç‚ôÄÔ∏è",
    title: "–£–≤–∞–∂–µ–Ω–∏–µ",
    description: "–∫ –≤—ã–±–æ—Ä—É –∏ –≥—Ä–∞–Ω–∏—Ü–∞–º"
  },
  {
    emoji: "üßò‚Äç‚ôÄÔ∏è",
    title: "–ö–æ–º—Ñ–æ—Ä—Ç",
    description: "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π"
  },
  {
    emoji: "üíµ",
    title: "–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å",
    description: "–≤—ã–ø–ª–∞—Ç—ã –∏ —á–µ—Å—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"
  }
];

const statsData = [
  {
    icon: "üë©‚Äçü¶±",
    value: 1890,
    text: "–¥–µ–≤—É—à–µ–∫ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –Ω–∞–º–∏",
    isAnimated: true,
    suffix: "+"
  },
  {
    icon: "üí∏",
    value: 65000000,
    text: "–≤—ã–ø–ª–∞—á–µ–Ω–æ —Å 2020 –≥–æ–¥–∞",
    isAnimated: true,
    suffix: "‚ÇΩ+"
  },
  {
    icon: "üìà",
    value: 98,
    text: "–æ—Å—Ç–∞—é—Ç—Å—è –¥–æ–ª—å—à–µ 3 –º–µ—Å—è—Ü–µ–≤",
    isAnimated: true,
    suffix: "%"
  },
  {
    icon: "üìÉ",
    text: "–†–∞–±–æ—Ç–∞–µ–º –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É",
    isAnimated: false
  },
  {
    icon: "üîê",
    text: "–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∑–∞—â–∏—Ç—É –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞",
    isAnimated: false
  },
  {
    icon: "üí¨",
    text: "–û—Ç–∫—Ä—ã—Ç—ã–µ —É—Å–ª–æ–≤–∏—è, –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–∏—Å—Å–∏–π",
    isAnimated: false
  }
];

const WhyUs = () => {
  const statsRef = useRef<HTMLDivElement>(null);
  const countersInitialized = useRef<boolean>(false);

  const initCounters = () => {
    if (!statsRef.current || countersInitialized.current) return;

    const options = {
      duration: 2,
      useGrouping: true,
    };

    statsData.forEach((stat, index) => {
      if (!stat.isAnimated || !stat.value) return;

      const element = statsRef.current?.querySelector(`#counter-${index}`);
      if (!element) return;

      new CountUp(element as HTMLElement, stat.value, {
        ...options,
        suffix: stat.suffix,
      }).start();
    });

    countersInitialized.current = true;
  };

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            initCounters();
            observer.disconnect();
          }
        });
      },
      { threshold: 0.1 }
    );

    if (statsRef.current) {
      observer.observe(statsRef.current);
    }

    return () => observer.disconnect();
  }, []);

  return (
    <section id="why-us" className="py-20 bg-dark text-light">
      <div className="container mx-auto px-4">
        <h2 className="text-gold text-3xl md:text-4xl font-bold mb-16 text-center">–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-20">
          {reasonsData.map((reason, index) => (
            <div key={index} className="text-center p-6 border border-gold/20 rounded-lg hover:border-gold/60 transition-all duration-500 hover:-translate-y-2 hover:shadow-[0_0_15px_rgba(255,215,0,0.3)]">
              <div className="text-5xl mb-4">{reason.emoji}</div>
              <h3 className="text-xl font-bold mb-2 text-white">{reason.title}</h3>
              <p className="text-white/80">{reason.description}</p>
            </div>
          ))}
        </div>
        
        <div className="mt-24">
          <h2 className="text-gold text-3xl md:text-4xl font-bold mb-16 text-center">–ü–æ—á–µ–º—É –Ω–∞–º –¥–æ–≤–µ—Ä—è—é—Ç</h2>
          
          <div ref={statsRef} className="flex items-center justify-between flex-nowrap space-x-4 overflow-x-auto pb-4">
            {statsData.map((stat, index) => (
              <div key={index} className="flex items-center whitespace-nowrap flex-shrink-0 bg-dark/50 px-4 py-3 rounded-lg hover:bg-dark/60 transition-colors">
                <span className="text-3xl mr-3">{stat.icon}</span>
                <div className="flex items-baseline">
                  {stat.isAnimated && (
                    <span id={`counter-${index}`} className="text-xl font-bold text-gold mr-1">
                      0
                    </span>
                  )}
                  <span className="text-sm">{stat.text}</span>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
};

export default WhyUs;

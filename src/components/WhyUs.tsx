import React, { useEffect, useRef } from "react";

const reasonsData = [
  {
    emoji: "ü§ù",
    title: "–ó–∞–±–æ—Ç–∞",
    description: "–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –¥–æ–≤–µ—Ä–∏—è"
  },
  {
    emoji: "üôã‚Äç‚ôÄÔ∏è",
    title: "–£–≤–∞–∂–µ–Ω–∏–µ",
    description: "–∫ –≤—ã–±–æ—Ä—É –∏ –≥—Ä–∞–Ω–∏—Ü–∞–º"
  },
  {
    emoji: "üßò‚Äç‚ôÄÔ∏è",
    title: "–ö–æ–º—Ñ–æ—Ä—Ç",
    description: "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π"
  },
  {
    emoji: "üíµ",
    title: "–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å",
    description: "–≤—ã–ø–ª–∞—Ç—ã –∏ —á–µ—Å—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"
  }
];

const statsData = [
  {
    icon: "üë©‚Äçü¶±",
    value: "1890+",
    text: "–¥–µ–≤—É—à–µ–∫ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –Ω–∞–º–∏"
  },
  {
    icon: "üí∏",
    value: "65 000 000 ‚ÇΩ+",
    text: "–≤—ã–ø–ª–∞—á–µ–Ω–æ —Å 2020 –≥–æ–¥–∞"
  },
  {
    icon: "üìà",
    value: "98%",
    text: "–æ—Å—Ç–∞—é—Ç—Å—è –¥–æ–ª—å—à–µ 3 –º–µ—Å—è—Ü–µ–≤"
  },
  {
    icon: "üìÉ",
    value: "",
    text: "–†–∞–±–æ—Ç–∞–µ–º –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É"
  },
  {
    icon: "üîê",
    value: "",
    text: "–°–æ–±–ª—é–¥–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"
  },
  {
    icon: "üí¨",
    value: "",
    text: "–û—Ç–∫—Ä—ã—Ç—ã–µ —É—Å–ª–æ–≤–∏—è, –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–∏—Å—Å–∏–π"
  }
];

const WhyUs = () => {
  const statsRef = useRef<HTMLDivElement>(null);
  const animatedRefs = useRef<Map<HTMLElement, boolean>>(new Map());

  const checkScroll = () => {
    if (!statsRef.current) return;
    
    const elements = statsRef.current.querySelectorAll('.stat-item');
    
    elements.forEach((element) => {
      const el = element as HTMLElement;
      if (animatedRefs.current.get(el)) return;
      
      const rect = el.getBoundingClientRect();
      const isInView = rect.top <= window.innerHeight * 0.8;
      
      if (isInView) {
        el.classList.add('animate-in');
        animatedRefs.current.set(el, true);
      }
    });
  };

  useEffect(() => {
    window.addEventListener('scroll', checkScroll);
    // Initial check
    setTimeout(checkScroll, 100);
    
    return () => {
      window.removeEventListener('scroll', checkScroll);
    };
  }, []);

  return (
    <section id="why-us" className="py-20 bg-dark text-light">
      <div className="container mx-auto px-4">
        <h2 className="text-gold text-3xl md:text-4xl font-bold mb-16 text-center">–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-20">
          {reasonsData.map((reason, index) => (
            <div key={index} className="text-center p-6 border border-gold/20 rounded-lg hover:border-gold/60 transition-all duration-500 hover:-translate-y-2">
              <div className="text-5xl mb-4">{reason.emoji}</div>
              <h3 className="text-xl font-bold mb-2 text-white">{reason.title}</h3>
              <p className="text-white/80">{reason.description}</p>
            </div>
          ))}
        </div>
        
        <div className="mt-24">
          <h2 className="text-gold text-3xl md:text-4xl font-bold mb-16 text-center">–ü–æ—á–µ–º—É –Ω–∞–º –¥–æ–≤–µ—Ä—è—é—Ç</h2>
          
          <div ref={statsRef} className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-y-12 gap-x-8">
            {statsData.map((stat, index) => (
              <div key={index} className="stat-item flex items-center opacity-0 transition-all duration-700" style={{ transitionDelay: `${index * 150}ms` }}>
                <div className="text-4xl mr-4">{stat.icon}</div>
                <div>
                  <div className="flex items-baseline">
                    {stat.value && (
                      <span className="text-2xl font-bold text-gold mr-2">{stat.value}</span>
                    )}
                    <span className="text-lg">{stat.text}</span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
};

export default WhyUs;
